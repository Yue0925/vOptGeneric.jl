base) yue.zhang@magi3:~/vOptGeneric.jl/experiments/instances/momhMKPstu$ cat run5.slurm 
#!/bin/bash
#SBATCH --job-name=node353_cplex

#SBATCH --nodes=1-1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=40
#SBATCH --ntasks=1 
#SBATCH --mail-type=end
#SBATCH --mail-user=yue.zhang@lipn.univ-paris13.fr
#SBATCH --partition=COMPUTE-SHORT
#SBATCH --output=node353_cplex.txt
#SBATCH --error=node353_cplex.txt





# srun julia vOptMomkp3.jl ./MOBKP/set3/W7BI-tube1-asyn.DAT 

srun julia vOptMomkp3.jl ./MOBKP/set3/W7BI-tube1-1800.DAT 
(base) yue.zhang@magi3:~/vOptGeneric.jl/experiments/instances/momhMKPstu$ cat node353_cplex.txt 

Project MOMH 2021" --------------------------------

┌ Warning: Replacing docs for `Base.push! :: Tuple{Main.vOptGeneric.CutPool, Main.vOptGeneric.Cut}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.push! :: Tuple{Main.vOptGeneric.CutPool, Main.vOptGeneric.Cut}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.CutsInfo :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.StatInfo :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.BBparam :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.BO01Problem :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.Solution :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.isBinary :: Tuple{Vector{Float64}}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.addEquivX :: Tuple{Main.vOptGeneric.Solution, Vector{Float64}}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.show :: Tuple{IO, Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.dominate :: Tuple{Main.vOptGeneric.Solution, Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.strictDominate :: Tuple{Main.vOptGeneric.Solution, Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.updateCT :: Tuple{Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.NaturalOrderVector :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.push! :: Tuple{Main.vOptGeneric.NaturalOrderVector, Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.RelaxedBoundSet :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.IncumbentSet :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.push! :: Tuple{Main.vOptGeneric.CutPool, Main.vOptGeneric.Cut}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.Node :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.isRoot :: Tuple{Main.vOptGeneric.Node}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.hasNonExploredChild :: Tuple{Main.vOptGeneric.Node}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.delete! :: Tuple{Main.vOptGeneric.Node}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.prune! :: Tuple{Main.vOptGeneric.Node, Main.vOptGeneric.PrunedType}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.getPartialAssign :: Tuple{Main.vOptGeneric.Node}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.setVarObjBounds :: Tuple{Main.vOptGeneric.Node, Main.vOptGeneric.BO01Problem}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.removeVarObjBounds :: Tuple{Main.vOptGeneric.Node, Main.vOptGeneric.BO01Problem, Any, Any}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.removeVarBound :: Tuple{Main.vOptGeneric.BO01Problem, Int64, Int64}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.setVarBound :: Tuple{Main.vOptGeneric.BO01Problem, Int64, Int64}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.setObjBound :: Tuple{Main.vOptGeneric.BO01Problem, Vector{Float64}, Float64}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.push! :: Tuple{Main.vOptGeneric.CutPool, Main.vOptGeneric.Cut}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.CutsInfo :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.StatInfo :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.BBparam :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.BO01Problem :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.Solution :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.isBinary :: Tuple{Vector{Float64}}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.addEquivX :: Tuple{Main.vOptGeneric.Solution, Vector{Float64}}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.show :: Tuple{IO, Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.dominate :: Tuple{Main.vOptGeneric.Solution, Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.strictDominate :: Tuple{Main.vOptGeneric.Solution, Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.updateCT :: Tuple{Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.NaturalOrderVector :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.push! :: Tuple{Main.vOptGeneric.NaturalOrderVector, Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.RelaxedBoundSet :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.IncumbentSet :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.push! :: Tuple{Main.vOptGeneric.CutPool, Main.vOptGeneric.Cut}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.Node :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.isRoot :: Tuple{Main.vOptGeneric.Node}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.hasNonExploredChild :: Tuple{Main.vOptGeneric.Node}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.delete! :: Tuple{Main.vOptGeneric.Node}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.prune! :: Tuple{Main.vOptGeneric.Node, Main.vOptGeneric.PrunedType}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.getPartialAssign :: Tuple{Main.vOptGeneric.Node}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.setVarObjBounds :: Tuple{Main.vOptGeneric.Node, Main.vOptGeneric.BO01Problem}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.removeVarObjBounds :: Tuple{Main.vOptGeneric.Node, Main.vOptGeneric.BO01Problem, Any, Any}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.removeVarBound :: Tuple{Main.vOptGeneric.BO01Problem, Int64, Int64}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.setVarBound :: Tuple{Main.vOptGeneric.BO01Problem, Int64, Int64}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.setObjBound :: Tuple{Main.vOptGeneric.BO01Problem, Vector{Float64}, Float64}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.push! :: Tuple{Main.vOptGeneric.CutPool, Main.vOptGeneric.Cut}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.push! :: Tuple{Main.vOptGeneric.CutPool, Main.vOptGeneric.Cut}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.CutsInfo :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.StatInfo :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.BBparam :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.BO01Problem :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.Solution :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.isBinary :: Tuple{Vector{Float64}}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.addEquivX :: Tuple{Main.vOptGeneric.Solution, Vector{Float64}}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.show :: Tuple{IO, Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.dominate :: Tuple{Main.vOptGeneric.Solution, Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.strictDominate :: Tuple{Main.vOptGeneric.Solution, Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.updateCT :: Tuple{Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.NaturalOrderVector :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Base.push! :: Tuple{Main.vOptGeneric.NaturalOrderVector, Main.vOptGeneric.Solution}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.RelaxedBoundSet :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
┌ Warning: Replacing docs for `Main.vOptGeneric.IncumbentSet :: Union{}` in module `Main.vOptGeneric`
└ @ Base.Docs docs/Docs.jl:240
method : bc_rootRelaxEPB
n=50
Building...
Solving...
# ---------- node.assignment : 
Dict(5 => 1, 4 => 1, 6 => 1, 7 => 0, 2 => 1, 9 => 1, 8 => 1, 3 => 0, 1 => 1)

 # ------------------ node 353
]

 iter 0 	 L=Main.vOptGeneric.RelaxedBoundSet(NaturalOrderVector[
)
]

 iter 1 λ = [1.0, 0.0] 	 ext_l = Solution( 
 |xEquiv| = 1	 is_binary ? false
 y = [-684097.1138378382, -3.541629120903592e6]
 λ = [1.0, 0.0]	 ct = 684097.1138378382
 xEquiv = [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, -0.0, 0.35310854821068327, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9357978252900594, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8529587300087619, -0.0, 1.0, 1.0, 1.0, 1.0, 0.6173784476752131, 1.0, 1.0, 1.0, 0.24075644881528224, 1.0, 0.17655427410534172, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0]] )
 
 L=Main.vOptGeneric.RelaxedBoundSet(NaturalOrderVector[
Solution( 
 |xEquiv| = 1	 is_binary ? false
 y = [-684097.1138378382, -3.541629120903592e6]
 λ = [1.0, 0.0]	 ct = 684097.1138378382
 xEquiv = [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, -0.0, 0.35310854821068327, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9357978252900594, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8529587300087619, -0.0, 1.0, 1.0, 1.0, 1.0, 0.6173784476752131, 1.0, 1.0, 1.0, 0.24075644881528224, 1.0, 0.17655427410534172, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0]] )
)
Min -56456 x[1] - 68393 x[2] - 76103 x[3] - 81328 x[4] - 89297 x[5] - 94460 x[6] - 90143 x[7] - 96480 x[8] - 96685 x[9] - 94438 x[10] - 102913 x[11] - 97545 x[12] - 103489 x[13] - 77746 x[14] - 50996 x[15] - 71403 x[16] - 1486 x[17] - 93167 x[18] - 91348 x[19] - 88923 x[20] - 84809 x[21] - 94838 x[22] - 93960 x[23] - 85122 x[24] - 60952 x[25] - 75418 x[26] - 94500 x[27] - 68234 x[28] - 94474 x[29] - 93122 x[30] - 30940 x[31] - 98566 x[32] - 83825 x[33] - 78415 x[34] - 80249 x[35] - 94335 x[36] - 81441 x[37] - 90927 x[38] - 74917 x[39] - 94951 x[40] - 100956 x[41] - 98911 x[42] - 97708 x[43] - 92159 x[44] - 77533 x[45] - 89480 x[46] - 93251 x[47] - 92451 x[48] - 77848 x[49] - 93079 x[50]
Subject to
 -56456 x[1] - 68393 x[2] - 76103 x[3] - 81328 x[4] - 89297 x[5] - 94460 x[6] - 90143 x[7] - 96480 x[8] - 96685 x[9] - 94438 x[10] - 102913 x[11] - 97545 x[12] - 103489 x[13] - 77746 x[14] - 50996 x[15] - 71403 x[16] - 1486 x[17] - 93167 x[18] - 91348 x[19] - 88923 x[20] - 84809 x[21] - 94838 x[22] - 93960 x[23] - 85122 x[24] - 60952 x[25] - 75418 x[26] - 94500 x[27] - 68234 x[28] - 94474 x[29] - 93122 x[30] - 30940 x[31] - 98566 x[32] - 83825 x[33] - 78415 x[34] - 80249 x[35] - 94335 x[36] - 81441 x[37] - 90927 x[38] - 74917 x[39] - 94951 x[40] - 100956 x[41] - 98911 x[42] - 97708 x[43] - 92159 x[44] - 77533 x[45] - 89480 x[46] - 93251 x[47] - 92451 x[48] - 77848 x[49] - 93079 x[50] = -3.543324e6
 -56456 x[1] - 68393 x[2] - 76103 x[3] - 81328 x[4] - 89297 x[5] - 94460 x[6] - 90143 x[7] - 96480 x[8] - 96685 x[9] - 94438 x[10] - 102913 x[11] - 97545 x[12] - 103489 x[13] - 77746 x[14] - 50996 x[15] - 71403 x[16] - 1486 x[17] - 93167 x[18] - 91348 x[19] - 88923 x[20] - 84809 x[21] - 94838 x[22] - 93960 x[23] - 85122 x[24] - 60952 x[25] - 75418 x[26] - 94500 x[27] - 68234 x[28] - 94474 x[29] - 93122 x[30] - 30940 x[31] - 98566 x[32] - 83825 x[33] - 78415 x[34] - 80249 x[35] - 94335 x[36] - 81441 x[37] - 90927 x[38] - 74917 x[39] - 94951 x[40] - 100956 x[41] - 98911 x[42] - 97708 x[43] - 92159 x[44] - 77533 x[45] - 89480 x[46] - 93251 x[47] - 92451 x[48] - 77848 x[49] - 93079 x[50] ≥ -3.543334e6
 cte[1] : 75 x[1] + 40 x[2] + 365 x[3] + 95 x[4] + 25 x[5] + 17 x[6] + 125 x[7] + 20 x[8] + 22 x[9] + 84 x[10] + 75 x[11] + 50 x[12] + 15 x[13] + 12 x[16] + 10 x[18] + 50 x[20] + 10 x[23] + 50 x[26] + 60 x[27] + 150 x[28] + 75 x[31] + 102 x[33] + 40 x[36] + 60 x[37] + 165 x[39] + 45 x[43] + 25 x[47] + 150 x[49] ≤ 857.0
 cte[2] : 5 x[14] + 10 x[15] + 10 x[16] + 50 x[17] + 2 x[18] + 5 x[19] + 5 x[20] + 10 x[21] + 5 x[22] + 6 x[23] + 11 x[24] + 41 x[25] + 30 x[26] + 5 x[27] + 40 x[28] + 2 x[29] + 6 x[30] + 100 x[31] + 10 x[32] + 25 x[33] + 39 x[34] + 30 x[35] + 13 x[36] + 30 x[37] + 15 x[38] + 60 x[39] + 5 x[40] + 5 x[41] + 10 x[42] + 5 x[43] + 15 x[44] + 91 x[45] + 24 x[46] + 10 x[47] + 15 x[48] + 90 x[49] + 15 x[50] ≤ 857.0
 -41850 x[1] - 38261 x[2] - 23800 x[3] - 21697 x[4] - 7074 x[5] - 5587 x[6] - 5560 x[7] - 5500 x[8] - 3450 x[9] - 2391 x[10] - 761 x[11] - 460 x[12] - 367 x[13] - 24785 x[14] - 47910 x[15] - 30250 x[16] - 107200 x[17] - 4235 x[18] - 9835 x[19] - 9262 x[20] - 15000 x[21] - 6399 x[22] - 6155 x[23] - 10874 x[24] - 37100 x[25] - 27040 x[26] - 4117 x[27] - 32240 x[28] - 1600 x[29] - 4500 x[30] - 70610 x[31] - 6570 x[32] - 15290 x[33] - 23840 x[34] - 16500 x[35] - 7010 x[36] - 16020 x[37] - 8000 x[38] - 31026 x[39] - 2568 x[40] - 2365 x[41] - 4350 x[42] - 1972 x[43] - 4975 x[44] - 29400 x[45] - 7471 x[46] - 2700 x[47] - 3840 x[48] - 22400 x[49] - 3575 x[50] ≤ -661338.0
 -56456 x[1] - 68393 x[2] - 76103 x[3] - 81328 x[4] - 89297 x[5] - 94460 x[6] - 90143 x[7] - 96480 x[8] - 96685 x[9] - 94438 x[10] - 102913 x[11] - 97545 x[12] - 103489 x[13] - 77746 x[14] - 50996 x[15] - 71403 x[16] - 1486 x[17] - 93167 x[18] - 91348 x[19] - 88923 x[20] - 84809 x[21] - 94838 x[22] - 93960 x[23] - 85122 x[24] - 60952 x[25] - 75418 x[26] - 94500 x[27] - 68234 x[28] - 94474 x[29] - 93122 x[30] - 30940 x[31] - 98566 x[32] - 83825 x[33] - 78415 x[34] - 80249 x[35] - 94335 x[36] - 81441 x[37] - 90927 x[38] - 74917 x[39] - 94951 x[40] - 100956 x[41] - 98911 x[42] - 97708 x[43] - 92159 x[44] - 77533 x[45] - 89480 x[46] - 93251 x[47] - 92451 x[48] - 77848 x[49] - 93079 x[50] ≤ -3.540227e6
 x[1] ≥ 1.0
 x[2] ≥ 1.0
 x[3] ≥ 0.0
 x[4] ≥ 1.0
 x[5] ≥ 1.0
 x[6] ≥ 1.0
 x[7] ≥ 0.0
 x[8] ≥ 1.0
 x[9] ≥ 1.0
 x[1] ≤ 1.0
 x[2] ≤ 1.0
 x[3] ≤ 0.0
 x[4] ≤ 1.0
 x[5] ≤ 1.0
 x[6] ≤ 1.0
 x[7] ≤ 0.0
 x[8] ≤ 1.0
 x[9] ≤ 1.0
 x[1] binary
 x[2] binary
 x[3] binary
 x[4] binary
 x[5] binary
 x[6] binary
 x[7] binary
 x[8] binary
 x[9] binary
 x[10] binary
 x[11] binary
 x[12] binary
 x[13] binary
 x[14] binary
 x[15] binary
 x[16] binary
 x[17] binary
 x[18] binary
 x[19] binary
 x[20] binary
 x[21] binary
 x[22] binary
 x[23] binary
 x[24] binary
 x[25] binary
 x[26] binary
 x[27] binary
 x[28] binary
 x[29] binary
 x[30] binary
 x[31] binary
 x[32] binary
 x[33] binary
 x[34] binary
 x[35] binary
 x[36] binary
 x[37] binary
 x[38] binary
 x[39] binary
 x[40] binary
 x[41] binary
 x[42] binary
 x[43] binary
 x[44] binary
 x[45] binary
 x[46] binary
 x[47] binary
 x[48] binary
 x[49] binary
 x[50] binary

Version identifier: 22.1.0.0 | 2022-03-09 | 1a383f8ce
CPXPARAM_Threads                                 1
CPXPARAM_MIP_Limits_Nodes                        0
Generic callback                                 0x40
Warning:  No solution found from 1 MIP starts.
Retaining values of one MIP start for possible repair.
Tried aggregator 1 time.
MIP Presolve eliminated 3 rows and 9 columns.
MIP Presolve modified 41 coefficients.
Reduced MIP has 3 rows, 41 columns, and 100 nonzeros.
Reduced MIP has 41 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.12 ticks)
Found incumbent of value -3543324.000000 after 0.00 sec. (0.43 ticks)
Probing fixed 1 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.01 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 0 rows and 1 columns.
Reduced MIP has 3 rows, 40 columns, and 98 nonzeros.
Reduced MIP has 40 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.05 ticks)
Probing time = 0.00 sec. (0.01 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: none, using 1 thread.
Root relaxation solution time = 0.00 sec. (0.02 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                     -3543324.0000 -4023924.0000            13.56%
      0     0        cutoff       -3543324.0000                      3    0.00%
x opt found by cplex : [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0, 1.0, -0.0, -0.0, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0]
heuristics : 

Y : [[-662396.0, -3.543324e6]]
X : [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0, 1.0, -0.0, -0.0, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0]]
]

 iter 2 λ = [0.0, 1.0] 	 ext_r = Solution( 
 |xEquiv| = 1	 is_binary ? true
 y = [-662396.0, -3.543324e6]
 λ = [0.0, 1.0]	 ct = 3.543324e6
 xEquiv = [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0, 1.0, -0.0, -0.0, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0]] )
 
 L=Main.vOptGeneric.RelaxedBoundSet(NaturalOrderVector[
Solution( 
 |xEquiv| = 1	 is_binary ? false
 y = [-684097.1138378382, -3.541629120903592e6]
 λ = [1.0, 0.0]	 ct = 684097.1138378382
 xEquiv = [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, -0.0, 0.35310854821068327, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9357978252900594, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8529587300087619, -0.0, 1.0, 1.0, 1.0, 1.0, 0.6173784476752131, 1.0, 1.0, 1.0, 0.24075644881528224, 1.0, 0.17655427410534172, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0]] )
Solution( 
 |xEquiv| = 1	 is_binary ? false
 y = [-684097.1138378382, -3.543324e6]
 λ = [1.0, 0.0]	 ct = 684097.1138378382
 xEquiv = [Float64[]] )
Solution( 
 |xEquiv| = 1	 is_binary ? true
 y = [-662396.0, -3.543324e6]
 λ = [0.0, 1.0]	 ct = 3.543324e6
 xEquiv = [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0, 1.0, -0.0, -0.0, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0]] )
)

 iter 3 λ = [1694.879096407909, 21701.113837838173] 	 ]
pushing pt = Solution( 
 |xEquiv| = 1	 is_binary ? false
 y = [-686965.6246817622, -3.543334e6]
 λ = [1694.879096407909, 21701.113837838173]	 ct = 7.80586181767064e10
 xEquiv = [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, -0.0, 0.2444100935476753, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.4757185168574218, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8644844742499783, -0.0, 1.0, 1.0, 1.0, 1.0, 0.8911054322023463, 1.0, 1.0, 1.0, 0.768691576690254, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0]] )
 
 L=Main.vOptGeneric.RelaxedBoundSet(NaturalOrderVector[
Solution( 
 |xEquiv| = 1	 is_binary ? false
 y = [-684097.1138378382, -3.541629120903592e6]
 λ = [1.0, 0.0]	 ct = 684097.1138378382
 xEquiv = [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, -0.0, 0.35310854821068327, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9357978252900594, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8529587300087619, -0.0, 1.0, 1.0, 1.0, 1.0, 0.6173784476752131, 1.0, 1.0, 1.0, 0.24075644881528224, 1.0, 0.17655427410534172, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0]] )
Solution( 
 |xEquiv| = 1	 is_binary ? false
 y = [-684097.1138378382, -3.543324e6]
 λ = [1.0, 0.0]	 ct = 684097.1138378382
 xEquiv = [Float64[]] )
Solution( 
 |xEquiv| = 1	 is_binary ? true
 y = [-662396.0, -3.543324e6]
 λ = [0.0, 1.0]	 ct = 3.543324e6
 xEquiv = [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0, 1.0, -0.0, -0.0, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0]] )
Solution( 
 |xEquiv| = 1	 is_binary ? false
 y = [-686965.6246817622, -3.543334e6]
 λ = [1694.879096407909, 21701.113837838173]	 ct = 7.80586181767064e10
 xEquiv = [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, -0.0, 0.2444100935476753, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.4757185168574218, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8644844742499783, -0.0, 1.0, 1.0, 1.0, 1.0, 0.8911054322023463, 1.0, 1.0, 1.0, 0.768691576690254, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0]] )
) idxL=4
]

 after updating L=Main.vOptGeneric.RelaxedBoundSet(NaturalOrderVector[
Solution( 
 |xEquiv| = 1	 is_binary ? false
 y = [-684097.1138378382, -3.541629120903592e6]
 λ = [1.0, 0.0]	 ct = 684097.1138378382
 xEquiv = [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, -0.0, 0.35310854821068327, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9357978252900594, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8529587300087619, -0.0, 1.0, 1.0, 1.0, 1.0, 0.6173784476752131, 1.0, 1.0, 1.0, 0.24075644881528224, 1.0, 0.17655427410534172, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0]] )
Solution( 
 |xEquiv| = 1	 is_binary ? false
 y = [-684097.1138378382, -3.543324e6]
 λ = [1.0, 0.0]	 ct = 684097.1138378382
 xEquiv = [Float64[]] )
Solution( 
 |xEquiv| = 1	 is_binary ? true
 y = [-662396.0, -3.543324e6]
 λ = [0.0, 1.0]	 ct = 3.543324e6
 xEquiv = [[1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0, 1.0, -0.0, -0.0, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0]] )
)

 # -------------------------------- 
 
 
 
 ──────────────────────────────────────────────────────────────────────────
                                  Time                    Allocations      
                         ───────────────────────   ────────────────────────
    Tot / % measured:         47.8s /  37.7%           3.79GiB /  32.6%    

 Section         ncalls     time    %tot     avg     alloc    %tot      avg
 ──────────────────────────────────────────────────────────────────────────
 BB loop              1    18.0s  100.0%   18.0s   1.23GiB  100.0%  1.23GiB
   iteration        800    17.9s   99.6%  22.4ms   1.23GiB   99.2%  1.57MiB
     relax        1.81k    17.4s   96.9%  9.65ms   1.19GiB   96.0%   688KiB
     dominance      800   31.3ms    0.2%  39.2μs   19.9MiB    1.6%  25.5KiB
     incumbent      979   11.4ms    0.1%  11.6μs    697KiB    0.1%     729B
   next node        800   49.7ms    0.3%  62.2μs   9.38MiB    0.7%  12.0KiB
 ──────────────────────────────────────────────────────────────────────────
 total cuts : 0
 # informations of B&B algorithm : 
total_times_used = 23.33 
total_nodes = 1808 
pruned_nodes = 1073 
GAP = 0.0 
relaxation_time = 20.54 
test_dominance_time = 0.0 
update_incumbent_time = 0.05 
tree_size = 3.883 
nb_nodes_EPB = 499 
nb_nodes_VB = 1308 
root_relax = true 
TO = false 
rootLBS = 17 
LBSexhaustive = true

Querying...
length Y_N = 66
length X_E = 66
displayGraphics

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.57 ticks)
Sequential b&c:
  Real time             =    0.00 sec. (0.00 ticks)
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.57 ticks)
